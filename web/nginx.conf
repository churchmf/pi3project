#http://pkula.blogspot.ca/2013/06/live-video-stream-from-raspberry-pi.html
user nginx;
worker_processes auto;

events {
    worker_connections 1024;
}

http {
    include /etc/nginx/mime.types;
    default_type application/octet-stream;
    sendfile on;
    keepalive_timeout 65;
    server {
        listen    80;
        server_name localhost;
        # sample handlers
        #location /on_play {
        #  if ($arg_pageUrl ~* localhost) {
        #    return 201;
        #  }
        #  return 202;
        #}
        #location /on_publish {
        #  return 201;
        #}
        #location /vod {
        #  alias /var/myvideos;
        #}
        # rtmp stat
        location /stat {
        rtmp_stat all;
        rtmp_stat_stylesheet stat.xsl;
        }

        location /stat.xsl {
        # you can move stat.xsl to a different location
        root /usr/src/nginx-rtmp-module;
        }

        # rtmp control
        location /control {
        rtmp_control all;
        }

        error_page  500 502 503 504 /50x.html;
        location = /50x.html {
            root  html;
        }
    }
}

rtmp {
  server {
    listen 1935;
    #chunk_size 8192;
    ping 30s;
    notify_method get;
    application rtmp{
      live on;
      # You can push this stream to an external rtmp server while accessible locally.
      # If you experience artefacts and delays on external server lower the bitrate.
      # There seems to be a bug. When watching local stream and pushing to remote, the remote
      # stream become really weird with random blocks and strange shadows.(consider 1 one for now)
      # push rtmp://ip-address-external-rtmp/app/stream;
      # sample play/publish handlers
      #on_play http://localhost:80/on_play;
      #on_publish http://localhost:80/on_publish;
      # sample recorder
      #recorder rec1 {
      #  record all;
      #  record_interval 30s;
      #  record_path /tmp;
      #  record_unique on;
      #}
      # sample HLS
      #hls on;
      #hls_path /tmp/hls;
      #hls_sync 100ms;
     #This will start/stop our ffmpeg script and camera stream (thanks #towolf)
     exec_static /root/rtmp-nginx.sh;
     exec_kill_signal term;
    }
    # Video on demand
    #application vod {
    #  play /var/Videos;
    #}
    # Video on demand over HTTP
    #application vod_http {
    #  play http://localhost:80/vod/;
    #}
  }
}